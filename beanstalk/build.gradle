// -*- coding: utf-8; mode: groovy -*-

import com.amazonaws.auth.policy.Policy
import com.amazonaws.auth.policy.Principal
import com.amazonaws.auth.policy.Statement
import com.amazonaws.auth.policy.actions.S3Actions
import com.amazonaws.auth.policy.resources.S3BucketResource
import com.amazonaws.auth.policy.resources.S3ObjectResource
import com.amazonaws.services.s3.model.ObjectMetadata

import jp.classmethod.aws.gradle.s3.AmazonS3FileUploadTask
import jp.classmethod.aws.gradle.s3.BucketPolicyTask
import jp.classmethod.aws.gradle.s3.CreateBucketTask
import jp.classmethod.aws.gradle.s3.DeleteBucketTask

buildscript {
	repositories {
		mavenCentral()
		maven { url "https://plugins.gradle.org/m2/" }
	}
	dependencies {
		classpath "jp.classmethod.aws:gradle-aws-plugin:0.+"
	}
}

apply plugin: "jp.classmethod.aws.beanstalk"
apply plugin: "jp.classmethod.aws.s3"

aws {
	profileName = "default"
	region = "us-east-1"
}

def myBucketName = 'gradle-aws-plugin-sample'

task copyForSourcePackage(type: Copy) {
    from 'Dockerrun.aws.json'
    into 'build/package'
    expand(tag: versionDesc)
}

task createBeanstalkPackage(type: Zip) {
    dependsOn copyForSourcePackage
    from 'build/package'
    destinationDir file('build/zip')
    baseName = 'foo'
}

task uploadBeanstalkPackageToS3(type: AmazonS3FileUploadTask) {
    dependsOn createBeanstalkPackage

    file file('build/zip/foo.zip')
    bucketName 'miovision-miocloud-corp'
    key "Nimbus/jptest/${versionDesc}/foo.zip"
}

task createApplicationVersion(type: jp.classmethod.aws.gradle.elasticbeanstalk.AWSElasticBeanstalkCreateApplicationVersionTask) {
    dependsOn uploadBeanstalkPackageToS3

    appName = "johntest"
    versionLabel = "johntest-${versionDesc}"
    bucketName = "miovision-miocloud-corp"
    key = "Nimbus/jptest/${versionDesc}/foo.zip"
}